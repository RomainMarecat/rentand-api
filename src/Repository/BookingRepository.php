<?php

namespace App\Repository;

use Doctrine\ORM\Query;

/**
 * BookingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BookingRepository extends \Doctrine\ORM\EntityRepository
{
    public function adminCget(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $query = $this->createQueryBuilder('entity');
        $query
            ->select('partial entity.{id, createdAt, statut, cancellation}')
            ->addSelect('partial c.{id, sport, city}')
            ->addSelect('partial u.{id, firstName, lastName}')
            ->addSelect('partial a.{id, firstName, lastName}')
            ->leftJoin('entity.courses', 'c')
            ->leftJoin('entity.user', 'u')
            ->leftJoin('entity.advert', 'a')
            ->andWhere('entity.statut != 0');

        if (!empty($criteria)) {
            foreach ($criteria as $key => $value) {
                $query
                    ->andWhere('entity.' . $key . ' = :' . $key)
                    ->setParameter($key, $value);
            }
        }
        if (!empty($orderBy)) {
            foreach ($orderBy as $key => $value) {
                $query->addOrderBy('entity.' . $key, $value);
            }
        }
        if (isset($offset)) {
            $query->setFirstResult($offset);
        }
        if (isset($limit)) {
            $query->setMaxResults($limit);
        }

        return $query->getQuery()->getResult(Query::HYDRATE_ARRAY);
    }

    public function findByUser($user)
    {
        $query = $this->createQueryBuilder('entity');
        $query
            ->select('partial entity.{id, walletId, statut, mangoPayTransactionId, transaction, code, price, createdAt}')
            ->addSelect('partial u.{id, email, firstName, lastName}')
            ->addSelect('partial au.{id, email, firstName, lastName, planningId}')
            ->addSelect('partial a.{id, slug, firstName, lastName}')
            ->addSelect('partial c.{id, sport, city, meeting, level, language, start, end}')
            ->addSelect('partial p.{id, number, countryCode, countryNumber, checked}')
            ->addSelect('partial media.{id, filename, alt, ext}')
            ->innerJoin('entity.courses', 'c')
            ->innerJoin('entity.advert', 'a')
            ->innerJoin('a.media', 'media')
            ->innerJoin('a.user', 'au')
            ->innerJoin('entity.user', 'u')
            ->leftJoin('au.phone', 'p')
            ->andWhere('u.id = :user')
            ->setParameter('user', $user)
            ->addOrderBy('entity.createdAt', 'DESC')
            ->addOrderBy('c.start', 'ASC');

        return $query->getQuery()->getResult(Query::HYDRATE_ARRAY);
    }

    public function findPaymentsByMono($user)
    {
        $query = $this->createQueryBuilder('entity');
        $query
            ->select('partial entity.{id, walletId, statut, mangoPayTransactionId, transaction, code, price, createdAt}')
            ->addSelect('partial u.{id, email, firstName, lastName}')
            ->addSelect('partial au.{id, email, firstName, lastName, planningId}')
            ->addSelect('partial a.{id, slug, firstName, lastName}')
            ->addSelect('partial c.{id, sport, city, meeting, level, language, start, end}')
            ->addSelect('partial p.{id, number, countryCode, countryNumber, checked}')
            ->innerJoin('entity.courses', 'c')
            ->innerJoin('entity.advert', 'a')
            ->innerJoin('a.user', 'au')
            ->innerJoin('entity.user', 'u')
            ->leftJoin('u.phone', 'p')
            ->andWhere('au.id = :user')
            ->setParameter('user', $user)
            ->addOrderBy('entity.statut', 'ASC')
            ->addOrderBy('c.start', 'ASC');

        return $query->getQuery()->getResult(Query::HYDRATE_ARRAY);
    }
}
