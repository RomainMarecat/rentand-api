<?php

namespace App\Repository;

use Doctrine\ORM\Query;

/**
 * SportTeachedRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SportTeachedRepository extends AbstractEntityRepository
{
    protected function setQueryCriteria($query, array $criteria)
    {
        if (isset($criteria['advert'])) {
            $query
                ->andWhere('advert.id = :advert')
                ->setParameter('advert', $criteria['advert']);
        }

        if (isset($criteria['sport'])) {
            $query
                ->andWhere('sport.id = :sport')
                ->setParameter('sport', $criteria['sport']);
        }

        if (isset($criteria['advertSport'])) {
            if (is_string($criteria['advertSport'])) {
                $query
                    ->andWhere('entity.id = :advertSport');
            } elseif (is_array($criteria['advertSport'])) {
                $query
                    ->andWhere('entity.id IN (:advertSport)');
            }
            $query
                ->setParameter('advertSport', $criteria['advertSport']);
        }

        return $query;
    }


    public function findPreBookingLevelsBy(array $criteria)
    {
        $query = $this->createQueryBuilder('entity');
        $query
            ->select('entity.levels', 'entity.ages')
            ->leftJoin('entity.advert', 'advert')
            ->leftJoin('entity.sport', 'sport')
            ->andWhere('advert.statut = 1');

        $query = $this->setQueryCriteria($query, $criteria);

        return $query->getQuery()->getOneOrNullResult();
    }

    public function findAdvertSport(array $criteria)
    {
        $query = $this->createQueryBuilder('entity');
        $query
            ->select('entity')
            ->leftJoin('entity.advert', 'advert')
            ->leftJoin('entity.sport', 'sport')
            ->andWhere('advert.statut = 1');

        $query = $this->setQueryCriteria($query, $criteria);


        return $query->getQuery()->getOneOrNullResult();
    }

    public function findLevelsBy(array $criteria)
    {
        $query = $this->createQueryBuilder('entity');
        $query
            ->select('entity.levels')
            ->leftJoin('entity.advert', 'advert')
            ->leftJoin('entity.sport', 'sport')
            ->andWhere('advert.statut = 1');

        $query = $this->setQueryCriteria($query, $criteria);


        return $query->getQuery()->getOneOrNullResult();
    }

    public function findAgesBy(array $criteria)
    {
        $query = $this->createQueryBuilder('entity');
        $query
            ->select('entity.ages')
            ->leftJoin('entity.advert', 'advert')
            ->leftJoin('entity.sport', 'sport')
            ->andWhere('advert.statut = 1');

        $query = $this->setQueryCriteria($query, $criteria);


        return $query->getQuery()->getOneOrNullResult();
    }

    public function findSpecialitiesBy($criteria)
    {
        $query = $this->createQueryBuilder('entity');
        $query
            ->select('partial entity.{id}')
            ->addSelect('partial speciality.{id}')
            ->addSelect('partial translation_speciality.{id, title, locale}')
            ->innerJoin('entity.advert', 'advert')
            ->innerJoin('entity.sport', 'sport')
            ->innerJoin('entity.specialities', 'speciality')
            ->leftJoin(
                'speciality.translations',
                'translation_speciality',
                null,
                null,
                'translation_speciality.locale'
            )
            ->andWhere('advert.statut = 1');

        $query = $this->setQueryCriteria($query, $criteria);

        return $query->getQuery()->getResult(Query::HYDRATE_ARRAY);
    }

    public function findSportsBy($criteria)
    {
        $query = $this->createQueryBuilder('entity');
        $query
            ->select('partial entity.{id}')
            ->addSelect('partial sport.{id}')
            ->addSelect('partial translation_sport.{id, title, locale}')
            ->innerJoin('entity.sport', 'sport')
            ->leftJoin(
                'sport.translations',
                'translation_sport',
                null,
                null,
                'translation_sport.locale'
            );

        $query = $this->setQueryCriteria($query, $criteria);

        return $query->getQuery()->getResult(Query::HYDRATE_ARRAY);
    }
}
