<?php

namespace App\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;

/**
 * CampaignRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
abstract class AbstractEntityRepository extends EntityRepository
{
    private static $unauthorizedKeys = array(
        'hint', 'hydrate', 'offset', 'limit', 'partial_load', 'asc', 'desc'
    );

    /**
     *
     * array criteria array($key => $value)
     * array joinColumn array($join, $alias, $conditionType, $condition, $indexBy)
     * @param array $criteria
     * @param array $joinColumn
     * @return mixed
     */
    public function findByCriteria(
        array $criteria = array(),
        array $joinColumn = array()
    )
    {
        $query = $this->createQueryBuilder('entity');

        foreach ($criteria as $key => $value) {
            if (!in_array($key, self::$unauthorizedKeys)) {
                $query
                    ->andWhere('entity.' . $key . ' = :' . $key)
                    ->setParameter($key, $value);
            }
        }

        $this->createJoin($joinColumn, $query);

        if (isset($criteria['asc'])) {
            $query->addOrderBy('entity.' . $criteria['asc'], 'ASC');
        }
        if (isset($criteria['desc'])) {
            $query->addOrderBy('entity.' . $criteria['desc'], 'DESC');
        }
        if (isset($criteria['offset'])) {
            $query->setFirstResult($criteria['offset']);
        }
        if (isset($criteria['limit'])) {
            $query->setMaxResults($criteria['limit']);
        }
        $query = $query->getQuery();

        $query = $this->createQueryMode($query, $criteria);

        return $query->getResult();
    }

    /**
     * array joinColumn array($join, $alias, $conditionType, $condition, $indexBy)
     */
    public function findOneByCriteria(array $criteria = array(), array $joinColumn = array())
    {
        $query = $this->createQueryBuilder('entity');

        foreach ($criteria as $key => $value) {
            if (!in_array($key, self::$unauthorizedKeys)) {
                $query
                    ->andWhere('entity.' . $key . ' = :' . $key)
                    ->setParameter($key, $value);
            }
        }

        $this->createJoin($joinColumn, $query);

        $query = $query->getQuery();

        $query = $this->createQueryMode($query, $criteria);

        return $query->getOneOrNullResult();
    }

    protected function createJoin($joinColumn, $query)
    {
        foreach ($joinColumn as $join) {
            if (!is_array($join)) {
                $join = array(
                    'join' => $join,
                    'alias' => substr(uniqid('', true), -5),
                    'conditionType' => null,
                    'condition' => null,
                    'indexBy' => null
                );
            }
            if (isset($join['join']) && isset($join['alias'])) {
                $query
                    ->addSelect($join['alias'])
                    ->leftJoin(
                        (isset($join['leftJoin']) ? $join['leftJoin'] : 'entity') . '.' . $join['join'],
                        $join['alias'],
                        isset($join['conditionType']) ? $join['conditionType'] : null,
                        isset($join['condition']) ? $join['condition'] : null,
                        isset($join['alias']) && isset($join['indexBy']) ?
                            $join['alias'] . '.' . $join['indexBy'] : null
                    );
            }
        }
        return $query;
    }

    protected function createQueryMode($query, $criteria)
    {
        if (isset($criteria['hint'])) {
            $query->setHint($criteria['hint'], true);
        }
        if (isset($criteria['partial_load'])) {
            $query->setHint(Query::HINT_FORCE_PARTIAL_LOAD, true);
        }
        if (isset($criteria['hydrate'])) {
            return $query->getOneOrNullResult($criteria['hydrate']);
        }

        return $query;
    }
}
