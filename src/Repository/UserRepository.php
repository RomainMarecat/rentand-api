<?php

namespace App\Repository;

use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\Query;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends AbstractEntityRepository
{
    public function getUsers()
    {
        $query = $this->createQueryBuilder('entity');
        $query
            ->addSelect('partial entity.{id}')
            ->addSelect('partial appMetadata.{id}')
            ->addSelect('partial userMetadata.{id, firstname, lastname, slug}')
            ->addSelect('partial media.{id,filename}')
            ->leftJoin('entity.appMetadata', 'appMetadata')
            ->leftJoin('entity.userMetadata', 'userMetadata')
            ->leftJoin('userMetadata.media', 'media')
            ->andWhere('appMetadata.coach = 1')
            ->andWhere('entity.enabled = 1');

        return $query->getQuery()
            ->setHint(Query::HINT_FORCE_PARTIAL_LOAD, true)
            ->getResult();
    }

    public function getUser(string $slug)
    {
        $query = $this->createQueryBuilder('entity');
        $query
            ->addSelect('partial entity.{id}')
            ->addSelect('partial appMetadata.{id}')
            ->addSelect('partial userMetadata.{id, firstname, lastname, slug, languages, birthday, nationality}')
            ->addSelect('partial media.{id,filename}')
            ->addSelect('partial sportsTeached.{id, orderNumber, ages, levels, translations}')
            ->addSelect('partial cityTeached.{id, personalMeetingPointAccepted}')
            ->addSelect('partial city.{id, name, lat, lng}')
            ->addSelect('partial meetingPoint.{id, title, lat, lng}')
            ->addSelect('partial sport.{id, name, slug, level, translations}')
            ->leftJoin('entity.appMetadata', 'appMetadata')
            ->leftJoin('entity.userMetadata', 'userMetadata')
            ->leftJoin('userMetadata.media', 'media')
            ->leftJoin('entity.sportsTeached', 'sportsTeached')
            ->leftJoin('entity.citiesTeached', 'cityTeached')
            ->leftJoin('cityTeached.city', 'city')
            ->leftJoin('city.meetingPoints', 'meetingPoint')
            ->leftJoin('sportsTeached.sport', 'sport')
            ->andWhere('userMetadata.slug = :slug')
            ->setParameter('slug', $slug)
            ->andWhere('appMetadata.coach = 1')
            ->andWhere('entity.enabled = 1');

        try {
            return $query->getQuery()
                ->setHint(Query::HINT_FORCE_PARTIAL_LOAD, true)
                ->getOneOrNullResult();
        } catch (NonUniqueResultException $e) {
            return null;
        }
    }

    public function findUsersIdByMangopayId($mangopayId)
    {
        $query = $this->createQueryBuilder('entity');
        $query
            ->select('partial entity.{id, email, firstName, lastName, nationality, birthdate, mangopayId}')
            ->addSelect('partial a.{id, country}')
            ->leftJoin('entity.address', 'a');
        if (is_null($mangopayId)) {
            $query->where('entity.mangopayId IS NULL');
        } else {
            $query->where('entity.mangopayId = :mangopayId');
            $query->setParameter('mangopayId', $mangopayId);
        }

        return $query->getQuery()->getResult(Query::HYDRATE_ARRAY);
    }

    public function findUserIn(array $users)
    {
        $query = $this->createQueryBuilder('entity');
        $query
            ->select('partial entity.{id, email, firstName, lastName, nationality, birthdate, mangopayId}')
            ->addSelect('partial a.{id, country}')
            ->leftJoin('entity.address', 'a')
            ->where('entity.id IN (:users)')
            ->setParameter('users', $users);

        return $query->getQuery()->getResult(Query::HYDRATE_OBJECT);
    }

    public function adminCget()
    {
        $query = $this->createQueryBuilder('entity');
        $query
            ->select('partial entity.{id, email, firstName, lastName, createdAt, lastLogin, roles, planningId}')
            ->addSelect('partial a.{id, city}')
            ->leftJoin('entity.address', 'a');

        return $query->getQuery()->getResult(Query::HYDRATE_ARRAY);
    }

    public function adminCgetErrors()
    {
        $query = $this->createQueryBuilder('entity');
        $query
            ->select('partial entity.{id, email, firstName, lastName, createdAt, updatedAt, roles, mangopayId, planningId, birthdate}')
            // ->addSelect('partial a.{id, city}')
            // ->addSelect('partial p.{id, number}')
            // ->leftJoin('entity.address', 'a')
            // ->leftJoin('entity.phone', 'p')
            ->where('entity.mangopayId IS NULL')
            ->orWhere('entity.mangopayId = \'\'')
            // ->orWhere('entity.enabled = 0')
            // ->orWhere('entity.email IS NULL')
            ->orWhere('entity.planningId IS NULL')
            // ->orWhere('entity.type IS NULL')
            // ->orWhere('p.number IS NULL')
            // ->orWhere('entity.roles IS NULL')
            // ->orWhere('(entity.roles LIKE \'%ROLE_MONO%\' AND entity.planningId IS NULL)')
        ;

        return $query->getQuery()->getResult(Query::HYDRATE_ARRAY);
    }

    public function findPartialOneByAdvert($user)
    {
        $query = $this->createQueryBuilder('entity');
        $query
            ->select('partial entity.{id, email, firstName}')
            ->innerJoin('entity.adverts', 'advert')
            ->andWhere('advert.id = :advert')
            ->setParameter('advert', $user);

        return $query->getQuery()->getOneOrNullResult(Query::HYDRATE_ARRAY);
    }

    public function findPartialOneByPlanning($planning)
    {
        $query = $this->createQueryBuilder('entity');
        $query
            ->select('partial entity.{id, email, firstName, lastName}')
            ->addSelect('partial p.{id, number}')
            ->innerJoin('entity.phone', 'p')
            ->andWhere('entity.planningId = :planning')
            ->setParameter('planning', $planning);

        return $query->getQuery()->getOneOrNullResult(Query::HYDRATE_ARRAY);
    }
}
