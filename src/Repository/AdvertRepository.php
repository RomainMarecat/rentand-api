<?php

namespace App\Repository;

use Doctrine\ORM\Query;

/**
 * SportTeachedRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends AbstractEntityRepository
{
    public function adminCget()
    {
        $query = $this->createQueryBuilder('entity');
        $query
            ->select('partial entity.{id, firstName, lastName, createdAt, updatedAt, statut, enabled, cancel, slug}')
            ->addSelect('partial u.{id, email, planningId}')
            ->addSelect('partial p.{id, number, countryNumber, checked}')
            ->leftJoin('entity.user', 'u')
            ->leftJoin('u.phone', 'p');

        return $query->getQuery()->getResult(Query::HYDRATE_ARRAY);
    }

    public function findOneByBooking($booking)
    {
        $query = $this->createQueryBuilder('entity');
        $query
            ->select('partial entity.{id, slug}')
            ->addSelect('booking')
            ->addSelect('partial i.{id, filename, ext, alt}')
            ->addSelect('partial u.{id, email, firstName, lastName, planningId}')
            ->addSelect('partial p.{id, number, countryCode, countryNumber, checked}')
            ->addSelect('partial d.{id, title}')
            ->addSelect('partial t.{id, title}')
            ->innerJoin('entity.bookings', 'booking')
            ->innerJoin('entity.user', 'u')
            ->innerJoin('entity.diploma', 'd')
            ->leftJoin('entity.translations', 't')
            ->leftJoin('u.phone', 'p')
            ->leftJoin('entity.media', 'i')
            ->andWhere('entity.statut = 1')
            ->andWhere('entity.enabled = 1')
            ->andWhere('booking.id = :booking')
            ->setParameter('booking', $booking);

        return $query->getQuery()->getOneOrNullResult(Query::HYDRATE_ARRAY);
    }


    public function findAdvertSportsByCriteria(array $criteria)
    {
        $query = $this->createQueryBuilder('entity');
        $query
            ->select('partial entity.{id}')
            ->addSelect('partial advertSport.{id}')
            ->innerJoin('entity.sports', 'advertSport')
            ->andWhere('entity.statut = 1')
            ->andWhere('entity.enabled = 1');
        if (isset($criteria['advert'])) {
            $query
                ->andWhere('entity.id = :advert')
                ->setParameter('advert', $criteria['advert']);
        }

        return $query->getQuery()->getResult(Query::HYDRATE_ARRAY);
    }

    public function findAdvertSportsByAdvert($user)
    {
        $query = $this->createQueryBuilder('entity');
        $query
            ->select('partial entity.{id}')
            ->addSelect('partial advertSport.{id}')
            ->addSelect('partial sport.{id}')
            ->addSelect('partial media.{id, filename, alt, ext}')
            ->innerJoin('entity.sports', 'advertSport')
            ->innerJoin('advertSport.medias', 'media')
            ->innerJoin('advertSport.sport', 'sport')
            ->andWhere('entity.statut = 1')
            ->andWhere('entity.enabled = 1')
            ->andWhere('entity.id = :advert')
            ->setParameter('advert', $user);

        return $query->getQuery()->getOneOrNullResult(Query::HYDRATE_ARRAY);
    }

    public function findByBestAdverts($limit)
    {
        $query = $this->createQueryBuilder('entity');
        $query
            ->select('partial entity.{id, firstName, title, slug} as advert')
            ->addSelect($query->expr()->avg('c.grade') . 'as stars')
            ->addSelect('partial i.{id, filename, alt, ext} as media')
            // ->addSelect('u.planningId as planning')
            ->addSelect('u.planningId as planning')
            ->leftJoin('entity.comments', 'c', 'WITH', 'c.validated = 1')
            ->leftJoin('entity.translations', 't')
            ->leftJoin('entity.media', 'i')
            ->leftJoin('entity.user', 'u')
            ->leftJoin('entity.cities', 'ci')
            ->andWhere('entity.statut = 1')
            ->andWhere('entity.flux1 = 1')
            ->andWhere('entity.enabled = 1')
            ->addGroupBy('entity.id')
            ->setMaxResults($limit);

        return $query->getQuery()->getResult();
    }

    public function findByAdvertsChampions($limit)
    {
        $query = $this->createQueryBuilder('entity');
        $query
            ->select('partial entity.{id, firstName, title, slug} as advert')
            ->addSelect($query->expr()->count('b.id') . 'as num_bookings')
            ->addSelect($query->expr()->avg('c.grade') . 'as stars')
            ->addSelect($query->expr()->min('b.price') . 'as min_price')
            ->addSelect('partial i.{id, filename, alt, ext} as media')
            ->leftJoin('entity.bookings', 'b')
            ->leftJoin('entity.comments', 'c', 'WITH', 'c.validated = 1')
            ->leftJoin('entity.translations', 't')
            ->leftJoin('entity.media', 'i')
            ->andWhere('entity.enabled = 1')
            ->andWhere('entity.statut = 1')
            ->addGroupBy('entity.id')
            ->addOrderBy('entity.createdAt', 'DESC')
            ->setMaxResults($limit);

        return $query->getQuery()->getResult();
    }

    public function findPartialOneBySlug($slug)
    {
        $query = $this->createQueryBuilder('entity');
        $query
            ->select('partial entity.{id, firstName, title, slug, passions, statut, cancel} as advert')
            // ->addSelect($query->expr()->count('b.id') . 'as num_bookings')
            // ->addSelect($query->expr()->avg('c.grade') . 'as stars')
            ->addSelect('partial i.{id, filename, alt, ext} as media')
            ->addSelect('partial meeting.{id, title, lat, lng} as meetings')
            ->addSelect('partial diploma.{id, title}')
            ->addSelect('partial city.{id, title, lat, lng, googleId}')
            ->addSelect('u.planningId as planning')
            ->addSelect('partial c.{id,comment, grade, createdAt}')
            ->addSelect('partial cu.{id, firstName, lastName}')
            ->innerJoin('entity.cities', 'city')
            ->innerJoin('entity.user', 'u')
            ->leftJoin('entity.diploma', 'diploma')
            ->leftJoin('entity.bookings', 'b')
            ->leftJoin('entity.meetings', 'meeting')
            ->leftJoin('entity.comments', 'c', 'WITH', 'c.validated = 1')
            ->leftJoin('entity.translations', 't')
            ->leftJoin('entity.media', 'i')
            ->leftJoin('c.user', 'cu')
            ->andWhere('entity.enabled = 1')
            ->andWhere('entity.statut = 1')
            ->andWhere('entity.slug = :slug')
            ->groupBy('city.id, meeting.id, c.id')
            ->addOrderBy('c.createdAt', 'DESC')
            ->setParameter('slug', $slug);

        return $query->getQuery()->getOneOrNullResult(Query::HYDRATE_ARRAY);
    }

    public function findStarsByAdvert($user)
    {
        $query = $this->createQueryBuilder('entity');
        $query
            ->select($query->expr()->avg('c.grade') . ' as stars')
            ->addSelect($query->expr()->count('c.id') . ' as countComments')
            ->leftJoin('entity.comments', 'c', 'WITH', 'c.validated = 1')
            ->andWhere('entity.id = :id')
            ->andWhere('entity.statut = 1')
            ->andWhere('entity.enabled = 1')
            ->setParameter('id', $user);

        return $query->getQuery()->getOneOrNullResult();
    }

    public function findLanguagesByAdvert($user)
    {
        $query = $this->createQueryBuilder('entity');
        $query
            ->select('entity.languages')
            ->andWhere('entity.id = :id')
            ->andWhere('entity.enabled = 1')
            ->andWhere('entity.statut = 1')
            ->setParameter('id', $user);

        return $query->getQuery()->getOneOrNullResult();
    }

    public function findTranslationsByAdvert($user)
    {
        $query = $this->createQueryBuilder('entity');
        $query
            ->select('partial entity.{id}')
            ->addSelect('partial translation.{id, locale, title, description1, description2, description3}')
            ->leftJoin('entity.translations', 'translation', null, null, 'translation.locale')
            ->andWhere('entity.id = :id')
            ->andWhere('entity.enabled = 1')
            ->andWhere('entity.statut = 1')
            ->setParameter('id', $user);

        return $query->getQuery()->getOneOrNullResult();
    }

    public function findCitiesByCriteria(array $criteria)
    {
        $query = $this->createQueryBuilder('entity');
        $query
            ->select('partial entity.{id}')
            ->addSelect('partial city.{id, title}')
            ->innerJoin('entity.cities', 'city')
            ->andWhere('entity.statut = 1')
            ->andWhere('entity.enabled = 1');

        if (isset($criteria['advert'])) {
            $query
                ->andWhere('entity.id = :id')
                ->setParameter('id', $criteria['advert']);
        }

        return $query->getQuery()->getResult(Query::HYDRATE_ARRAY);
    }

    public function findAdvertsByCriteria(array $criteria)
    {
        $query = $this->createQueryBuilder('entity');
        $query
            ->select('entity as advert')
            ->addSelect($query->expr()->count('b.id') . 'as num_bookings')
            ->addSelect($query->expr()->avg('c.grade') . 'as stars')
            ->addSelect($query->expr()->min('b.price') . 'as min_price')
            ->addSelect('i as media')
            ->addSelect('d as diploma')
            ->addSelect('u as user')
            ->leftJoin('entity.bookings', 'b')
            ->leftJoin('entity.diploma', 'd')
            ->leftJoin('entity.comments', 'c', 'WITH', 'c.validated = 1')
            ->leftJoin('entity.translations', 't')
            ->leftJoin('entity.media', 'i')
            ->leftJoin('entity.cities', 'cities')
            ->leftJoin('entity.sports', 's')
            ->leftJoin('entity.user', 'u')
            ->andWhere('s.slug := sport')
            ->andWhere('entity.enabled = 1')
            ->andWhere('entity.statut = 1')
            ->setParameter('sport', $criteria['sport'])
            ->andWhere('cities.id := city')
            ->setParameter('city', $criteria['city'])
            ->addGroupBy('entity.id')
            ->addOrderBy('entity.createdAt', 'DESC')
            ->setMaxResults(50);

        return $query->getQuery()->getResult();
    }

    protected function setQueryFields($query, $search)
    {
        $fields = array(
            'sport', 'lng_max', 'lng_min', 'lat_min', 'lat_max',
            'level', 'age', 'language',
            'limit', 'offset'
        );

        if (isset($search['lng_min'])
            or isset($search['lng_max'])
            or isset($search['lat_max'])
            or isset($search['lat_min'])) {
            $query
                ->innerJoin('entity.cities', 'city');
        }

        foreach ($fields as $field) {
            if (isset($search[$field])) {
                if ($field === 'lng_min') {
                    $query
                        ->andWhere('city.lng > :lng_min')
                        ->setParameter($field, $search[$field]);
                }
                if ($field === 'lng_max') {
                    $query
                        ->andWhere('city.lng < :lng_max')
                        ->setParameter($field, $search[$field]);
                }
                if ($field === 'lat_min') {
                    $query
                        ->andWhere('city.lat > :lat_min')
                        ->setParameter($field, $search[$field]);
                }
                if ($field === 'lat_max') {
                    $query
                        ->andWhere('city.lat < :lat_max')
                        ->setParameter($field, $search[$field]);
                }
                if ($field === 'sport') {
                    $query
                        ->andWhere('sport.id = :sport')
                        ->setParameter($field, $search[$field]);
                }
                if ($field === 'limit') {
                    $query
                        ->setMaxResults($search['limit']);
                }
                if ($field === 'offset') {
                    $query
                        ->setFirstResult($search['offset']);
                }
            }
        }

        return $query;
    }

    public function countAdvertBySearchForm(array $search)
    {
        $query = $this->createQueryBuilder('entity');
        $query
            ->select('count(distinct(entity.id)) as total')
            ->innerJoin('entity.media', 'media')
            ->innerJoin('entity.sports', 'advertSport')
            ->innerJoin('advertSport.sport', 'sport')
            ->leftJoin('sport.translations', 'sport_translation', null, null, 'sport_translation.locale')
            ->innerJoin('entity.user', 'u')
            ->andWhere('entity.statut = 1')
            ->andWhere('entity.enabled = 1');

        $query = $this->setQueryFields($query, $search);

        return $query->getQuery()->getOneOrNullResult();
    }

    public function findAdvertsBySearchForm(array $search)
    {
        $query = $this->createQueryBuilder('entity');
        $query
            ->select('partial entity.{id, slug, firstName, lastName, title} as advert')
            ->addSelect($query->expr()->avg('comment.grade') . 'as comment_avg')
            ->addSelect('COUNT(distinct comment) as comment_nb')
            ->addSelect('partial advertSport.{id, levels, ages}')
            ->addSelect('partial sport.{id}')
            ->addSelect('partial sport_translation.{id, title, locale}')
            ->addSelect('partial u.{id, firstName, lastName, birthdate, planningId}')
            ->addSelect('partial media.{id, filename, alt, ext}')
            ->innerJoin('entity.media', 'media')
            ->innerJoin('entity.sports', 'advertSport')
            ->innerJoin('advertSport.sport', 'sport')
            ->leftJoin('sport.translations', 'sport_translation', null, null, 'sport_translation.locale')
            ->innerJoin('entity.user', 'u')
            ->leftJoin('entity.comments', 'comment', 'WITH', 'comment.validated = 1')
            ->andWhere('entity.statut = 1')
            ->andWhere('entity.enabled = 1')
            ->addGroupBy('entity.id')
            ->orderBy('entity.flux5', 'ASC')
            ->addOrderBy('comment_avg', 'DESC')
            ->addOrderBy('comment_nb', 'DESC');

        $query = $this->setQueryFields($query, $search);

        return $query->getQuery()->getResult(Query::HYDRATE_ARRAY);
    }
}
