security:
    role_hierarchy:
        ROLE_ADMIN:       ROLE_USER
    encoders:
        App\Entity\User:
            algorithm: 'auto'
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # ...
        entity_provider: # optional, any user provider can be used
            entity:
                class: App\Entity\User
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

        login:
            pattern:  ^/v1/public/users/login
            stateless: true
            anonymous: true
            json_login:
                check_path:               /v1/public/users/login_check
                username_path: username
                password_path: password
                success_handler:          lexik_jwt_authentication.handler.authentication_success
                failure_handler:          lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern:   ^/v1/restricted
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
            provider: entity_provider

    access_control:
        - { path: ^/v1/public, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/v1/restricted,       roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/v1/admin,       roles: ROLE_ADMIN }
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
